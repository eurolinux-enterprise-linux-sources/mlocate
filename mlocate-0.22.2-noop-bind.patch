Ignore no-op bind mounts.

2010-03-30  Miloslav Trmač  <mitr@redhat.com>

	* src/updatedb.c (rebuild_bind_mount_paths): Ignore no-op bind mounts.
	* doc/updatedb.conf.5.in (PRUNE_BIND_MOUNTS): Document that no-op bind
	mounts are not skipped.

diff -r f505e36861d7 -r 87bcb87d48f9 doc/updatedb.conf.5.in
--- a/doc/updatedb.conf.5.in	Fri Mar 26 20:16:16 2010 +0100
+++ b/doc/updatedb.conf.5.in	Tue Mar 30 15:36:08 2010 +0200
@@ -96,6 +96,7 @@
 .BR updatedb (8).
 All file systems mounted in the subtree of a bind mount are skipped as well,
 even if they are not bind mounts.
+As an exception, bind mounts of a directory on itself are not skipped.
 
 By default, bind mounts are not skipped.
 
diff -r f505e36861d7 -r 87bcb87d48f9 src/updatedb.c
--- a/src/updatedb.c	Fri Mar 26 20:16:16 2010 +0100
+++ b/src/updatedb.c	Tue Mar 30 15:36:08 2010 +0200
@@ -370,8 +370,14 @@
     {
       if (conf_debug_pruning != false)
 	/* This is debuging output, don't mark anything for translation */
-	fprintf (stderr, " `%s', opts `%s'\n", me->mnt_dir, me->mnt_opts);
-      if (hasmntopt (me, "bind") != NULL)
+	fprintf (stderr, " `%s' on `%s', opts `%s'\n", me->mnt_fsname,
+		 me->mnt_dir, me->mnt_opts);
+      /* Bind mounts "to self" can be used (e.g. by policycoreutils-sandbox) to
+	 create another mount point to which Linux name space privacy flags can
+	 be attached.  Such a bind mount is not duplicating any part of the
+	 directory tree, so it should not be excluded. */
+      if (hasmntopt (me, "bind") != NULL
+	  && strcmp (me->mnt_fsname, me->mnt_dir) != 0)
 	{
 	  char dbuf[PATH_MAX], *dir;
 
